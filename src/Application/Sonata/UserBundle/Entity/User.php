<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\UserBundle\Entity;

use Sonata\UserBundle\Entity\BaseUser as BaseUser;
use WhatsappBundle\Entity\Configuration;
use WhatsappBundle\Entity\UserCompany;
use Doctrine\Common\Collections\ArrayCollection;

use Doctrine\ORM\Mapping as ORM;

/**
 * This file has been generated by the Sonata EasyExtends bundle.
 *
 * @link https://sonata-project.org/bundles/easy-extends
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class User extends BaseUser
{
    /**
     * @var int $id
     */
    protected $id;

    /**
     * Get id
     *
     * @return int $id
     */
    public function getId()
    {
        return $this->id;
    }    
    
    public function __construct()
    {
        parent::__construct();
        $this->configurations = new \Doctrine\Common\Collections\ArrayCollection();
        $this->companies = new \Doctrine\Common\Collections\ArrayCollection();
        $this->areaUsers = new \Doctrine\Common\Collections\ArrayCollection();
        $this->userConversations = new ArrayCollection();
        $this->messages = new ArrayCollection();
        $this->messageSendeds = new ArrayCollection();        
        $this->ticketSendedAreas = new \Doctrine\Common\Collections\ArrayCollection();
        $this->ticketSendedAreaUpdateds = new \Doctrine\Common\Collections\ArrayCollection();
        $this->ticketSendedAreaCreateds = new \Doctrine\Common\Collections\ArrayCollection();
        $this->productReceptedUpdateds = new \Doctrine\Common\Collections\ArrayCollection();
        $this->productReceptedCreateds = new \Doctrine\Common\Collections\ArrayCollection();
        $this->productSendedUpdateds = new \Doctrine\Common\Collections\ArrayCollection();
        $this->productSendedCreateds = new \Doctrine\Common\Collections\ArrayCollection();
        $this->obleaEnvioUpdateds = new \Doctrine\Common\Collections\ArrayCollection();
        $this->obleaEnvioCreateds = new \Doctrine\Common\Collections\ArrayCollection();
        $this->obleaRetiroUpdateds = new \Doctrine\Common\Collections\ArrayCollection();
        $this->obleaRetiroCreateds = new \Doctrine\Common\Collections\ArrayCollection();
    }
    
    
    public function getConfigurations()
    {
        return $this->configurations;
    }

    public function addConfiguration(UserCompany $configuration)
    {
        if ($this->getConfigurations()->contains($configuration)) {
            return $this;
        }

        $this->getConfigurations()->add($configuration);
        $configuration->addUser($this);

        return $this;
    }

    public function removeConfiguration(UserCompany $configuration)
    {
        if (!$this->getConfigurations()->contains($configuration)) {
            return $this;
        }

        $this->getConfigurations()->removeElement($configuration);
        $configuration->removeUser($this);

        return $this;
    }
    protected $configurations;
    
    public function getCompanies()
    {
        return $this->companies;
    }

    public function addCompanie(Configuration $companie)
    {
        if ($this->getCompanies()->contains($companie)) {
            return $this;
        }

        $this->getCompanies()->add($companie);
        $companie->setOwner($this);

        return $this;
    }

    public function removeCompanie(Configuration $companie)
    {
        if (!$this->getCompanies()->contains($companie)) {
            return $this;
        }

        $this->getCompanies()->removeElement($companie);
        $companie->setOwner(null);

        return $this;
    }
    
    protected $companies;
    
    protected $plantype;
    protected $aprovedplan;
    
    
    
    function getPlantype() {
        return $this->plantype;
    }

    function getAprovedplan() {
        return $this->aprovedplan;
    }
    function getAprovedplanText() {
        if($this->aprovedplan )
            return "sí";
        return "no";
    }
    function getEnabledText() {
        if($this->enabled )
            return "sí";
        return "no";
    }

    function setPlantype($plantype) {
        $this->plantype = $plantype;
    }

    function setAprovedplan($aprovedplan) {
        $this->aprovedplan = $aprovedplan;
    }
    
     /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\AreaUser", mappedBy="user" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $areaUsers;
    
    function getAreaUsers() {
        return $this->areaUsers;
    }
    
    function setAreaUsers($areaUsers) {
        $this->areaUsers = new ArrayCollection();
        if (count($areaUsers) > 0) {
            foreach ($areaUsers as $i) {
                $this->addSolutionType($i);
            }
        }
        return $this;
    }
    
    public function addAreaUser($areaUser)
    {
        $areaUser->setUser($this);
        $this->areaUsers->add($areaUser);
    }

    public function removeAreaUser($areaUsers)
    {
        $this->areaUsers->removeElement($areaUsers);
    }
    
     /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\UserConversation", mappedBy="user" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $userConversations;
    
    function getUserConversations() {
        return $this->userConversations;
    }
    
    function setUserConversations($userConversations) {
        $this->userConversations = new ArrayCollection();
        if (count($userConversations) > 0) {
            foreach ($userConversations as $i) {
                $this->addSolutionType($i);
            }
        }
        return $this;
    }
    
    public function addUserConversation($userConversation)
    {
        $userConversation->setConfiguration($this);
        $this->userConversations->add($userConversation);
    }

    public function removeUserConversation($userConversations)
    {
        $this->userConversations->removeElement($userConversations);
    }
   /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\Message", mappedBy="user" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $messages;
    
    function getMessages() {
        return $this->messages;
    }
    
    function setMessages($messages) {
        $this->messages = new ArrayCollection();
        if (count($messages) > 0) {
            foreach ($messages as $i) {
                $this->addSolutionType($i);
            }
        }
        return $this;
    }
    
    public function addMessage($message)
    {
        $message->setConfiguration($this);
        $this->messages->add($message);
    }

    public function removeMessage($messages)
    {
        $this->messages->removeElement($messages);
    }
  
     /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\MessageSended", mappedBy="user" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $messageSendeds;
    
    function getMessageSendeds() {
        return $this->messageSendeds;
    }
    
    function setMessageSendeds($messageSendeds) {
        $this->messageSendeds = new ArrayCollection();
        if (count($messageSendeds) > 0) {
            foreach ($messageSendeds as $i) {
                $this->addMessageSended($i);
            }
        }
        return $this;
    }
    
    public function addMessageSended($messageSended)
    {
        $messageSended->setUser($this);
        $this->messageSendeds->add($messageSended);
    }

    public function removeMessageSended($messageSendeds)
    {
        $this->messageSendeds->removeElement($messageSendeds);
    }
    
    /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\TicketSendedArea", mappedBy="user" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $ticketSendedAreas;
    
    function getTicketSendedAreas() {
        return $this->ticketSendedAreas;
    }
    
    function setTicketSendedAreas($ticketSendedAreas) {
        $this->ticketSendedAreas = new ArrayCollection();
        if (count($ticketSendedAreas) > 0) {
            foreach ($ticketSendedAreas as $i) {
                $this->addTicketSendedArea($i);
            }
        }
        return $this;
    }
    
    public function addTicketSendedArea($ticketSendedArea)
    {
        $ticketSendedArea->setUser($this);
        $this->ticketSendedAreas->add($ticketSendedArea);
    }

    public function removeTicketSendedArea($ticketSendedAreas)
    {
        $this->ticketSendedAreas->removeElement($ticketSendedAreas);
    }
  
     /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\TicketSendedArea", mappedBy="updatedBy" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $ticketSendedAreaUpdateds;
    
    function getTicketSendedAreaUpdateds() {
        return $this->ticketSendedAreaUpdateds;
    }
    
    function setTicketSendedAreaUpdateds($ticketSendedAreaUpdateds) {
        $this->ticketSendedAreaUpdateds = new ArrayCollection();
        if (count($ticketSendedAreaUpdateds) > 0) {
            foreach ($ticketSendedAreaUpdateds as $i) {
                $this->addTicketSendedAreaUpdated($i);
            }
        }
        return $this;
    }
    
    public function addTicketSendedAreaUpdated($ticketSendedArea)
    {
        $ticketSendedArea->setUser($this);
        $this->ticketSendedAreaUpdateds->add($ticketSendedArea);
    }

    public function removeTicketSendedAreaUpdated($ticketSendedAreaUpdateds)
    {
        $this->ticketSendedAreaUpdateds->removeElement($ticketSendedAreaUpdateds);
    }
  
     /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\TicketSendedArea", mappedBy="createdBy" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $ticketSendedAreaCreateds;
    
    function getTicketSendedAreaCreateds() {
        return $this->ticketSendedAreaCreateds;
    }
    
    function setTicketSendedAreaCreateds($ticketSendedAreaCreateds) {
        $this->ticketSendedAreaCreateds = new ArrayCollection();
        if (count($ticketSendedAreaCreateds) > 0) {
            foreach ($ticketSendedAreaCreateds as $i) {
                $this->addTicketSendedAreaUpdated($i);
            }
        }
        return $this;
    }
    
    public function addTicketSendedAreaCreated($ticketSendedArea)
    {
        $ticketSendedArea->setUser($this);
        $this->ticketSendedAreaCreateds->add($ticketSendedArea);
    }

    public function removeTicketSendedAreaCreated($ticketSendedAreaCreateds)
    {
        $this->ticketSendedAreaCreateds->removeElement($ticketSendedAreaCreateds);
    }
    
    /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\ProductRecepted", mappedBy="updatedBy" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $productReceptedCreateds;
    
    function getProductReceptedCreateds() {
        return $this->productReceptedCreateds;
    }
    
    function setProductReceptedCreateds($productReceptedCreateds) {
        $this->productReceptedCreateds = new ArrayCollection();
        if (count($productReceptedCreateds) > 0) {
            foreach ($productReceptedCreateds as $i) {
                $this->addProductReceptedCreated($i);
            }
        }
        return $this;
    }
    
    public function addProductReceptedCreated($ticketSendedArea)
    {
        $ticketSendedArea->setUser($this);
        $this->productReceptedCreateds->add($ticketSendedArea);
    }

    public function removeProductReceptedCreated($productReceptedCreateds)
    {
        $this->productReceptedCreateds->removeElement($productReceptedCreateds);
    }
    
    /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\ProductRecepted", mappedBy="updatedBy" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $productReceptedUpdateds;
    
    function getProductReceptedUpdateds() {
        return $this->productReceptedUpdateds;
    }
    
    function setProductReceptedUpdateds($productReceptedUpdateds) {
        $this->productReceptedUpdateds = new ArrayCollection();
        if (count($productReceptedUpdateds) > 0) {
            foreach ($productReceptedUpdateds as $i) {
                $this->addProductReceptedUpdated($i);
            }
        }
        return $this;
    }
    
    public function addProductReceptedUpdated($ticketSendedArea)
    {
        $ticketSendedArea->setUser($this);
        $this->productReceptedUpdateds->add($ticketSendedArea);
    }

    public function removeProductReceptedUpdated($productReceptedUpdateds)
    {
        $this->productReceptedUpdateds->removeElement($productReceptedUpdateds);
    }
    
    
    /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\ProductSended", mappedBy="updatedBy" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $productSendedUpdateds;
    
    function getProductSendedUpdateds() {
        return $this->productSendedUpdateds;
    }
    
    function setProductSendedUpdateds($productSendedUpdateds) {
        $this->productSendedUpdateds = new ArrayCollection();
        if (count($productSendedUpdateds) > 0) {
            foreach ($productSendedUpdateds as $i) {
                $this->addProductSendedUpdated($i);
            }
        }
        return $this;
    }
    
    public function addProductSendedUpdated($ticketSendedArea)
    {
        $ticketSendedArea->setUser($this);
        $this->productSendedUpdateds->add($ticketSendedArea);
    }

    public function removeProductSendedUpdated($productSendedUpdateds)
    {
        $this->productSendedUpdateds->removeElement($productSendedUpdateds);
    }
    
    
    /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\ProductSended", mappedBy="updatedBy" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $productSendedCreateds;
    
    function getProductSendedCreateds() {
        return $this->productSendedCreateds;
    }
    
    function setProductSendedCreateds($productSendedCreateds) {
        $this->productSendedCreateds = new ArrayCollection();
        if (count($productSendedCreateds) > 0) {
            foreach ($productSendedCreateds as $i) {
                $this->addProductSendedCreated($i);
            }
        }
        return $this;
    }
    
    public function addProductSendedCreated($ticketSendedArea)
    {
        $ticketSendedArea->setUser($this);
        $this->productSendedCreateds->add($ticketSendedArea);
    }

    public function removeProductSendedCreated($productSendedCreateds)
    {
        $this->productSendedCreateds->removeElement($productSendedCreateds);
    }
    
    
    /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\ObleaEnvio", mappedBy="updatedBy" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $obleaEnvioUpdateds;
    
    function getObleaEnvioUpdateds() {
        return $this->obleaEnvioUpdateds;
    }
    
    function setObleaEnvioUpdateds($obleaEnvioUpdateds) {
        $this->obleaEnvioUpdateds = new ArrayCollection();
        if (count($obleaEnvioUpdateds) > 0) {
            foreach ($obleaEnvioUpdateds as $i) {
                $this->addObleaEnvioUpdated($i);
            }
        }
        return $this;
    }
    
    public function addObleaEnvioUpdated($obleaEnvio)
    {
        $obleaEnvio->setUser($this);
        $this->obleaEnvioUpdateds->add($obleaEnvio);
    }

    public function removeObleaEnvioUpdated($obleaEnvioUpdateds)
    {
        $this->obleaEnvioUpdateds->removeElement($obleaEnvioUpdateds);
    }
    
    
    /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\ObleaEnvio", mappedBy="updatedBy" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $obleaEnvioCreateds;
    
    function getObleaEnvioCreateds() {
        return $this->obleaEnvioCreateds;
    }
    
    function setObleaEnvioCreateds($obleaEnvioCreateds) {
        $this->obleaEnvioCreateds = new ArrayCollection();
        if (count($obleaEnvioCreateds) > 0) {
            foreach ($obleaEnvioCreateds as $i) {
                $this->addObleaEnvioCreated($i);
            }
        }
        return $this;
    }
    
    public function addObleaEnvioCreated($obleaEnvioCreated)
    {
        $obleaEnvioCreated->setUser($this);
        $this->obleaEnvioCreateds->add($obleaEnvioCreated);
    }

    public function removeObleaEnvioCreated($obleaEnvioCreateds)
    {
        $this->obleaEnvioCreateds->removeElement($obleaEnvioCreateds);
    }
    
    
    
    /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\ObleaRetiro", mappedBy="updatedBy" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $obleaRetiroUpdateds;
    
    function getObleaRetiroUpdateds() {
        return $this->obleaRetiroUpdateds;
    }
    
    function setObleaRetiroUpdateds($obleaRetiroUpdateds) {
        $this->obleaRetiroUpdateds = new ArrayCollection();
        if (count($obleaRetiroUpdateds) > 0) {
            foreach ($obleaRetiroUpdateds as $i) {
                $this->addObleaRetiroUpdated($i);
            }
        }
        return $this;
    }
    
    public function addObleaRetiroUpdated($obleaRetiro)
    {
        $obleaRetiro->setUser($this);
        $this->obleaRetiroUpdateds->add($obleaRetiro);
    }

    public function removeObleaRetiroUpdated($obleaRetiroUpdateds)
    {
        $this->obleaRetiroUpdateds->removeElement($obleaRetiroUpdateds);
    }
    
    
    /**
     * @ORM\OneToMany(targetEntity="WhatsappBundle\Entity\ObleaRetiro", mappedBy="updatedBy" ,cascade={"persist", "remove"}, fetch="EXTRA_LAZY", orphanRemoval=false)
     */
    protected $obleaRetiroCreateds;
    
    function getObleaRetiroCreateds() {
        return $this->obleaRetiroCreateds;
    }
    
    function setObleaRetiroCreateds($obleaRetiroCreateds) {
        $this->obleaRetiroCreateds = new ArrayCollection();
        if (count($obleaRetiroCreateds) > 0) {
            foreach ($obleaRetiroCreateds as $i) {
                $this->addObleaRetiroCreated($i);
            }
        }
        return $this;
    }
    
    public function addObleaRetiroCreated($obleaRetiroCreated)
    {
        $obleaRetiroCreated->setUser($this);
        $this->obleaRetiroCreateds->add($obleaRetiroCreated);
    }

    public function removeObleaRetiroCreated($obleaRetiroCreateds)
    {
        $this->obleaRetiroCreateds->removeElement($obleaRetiroCreateds);
    }


}
